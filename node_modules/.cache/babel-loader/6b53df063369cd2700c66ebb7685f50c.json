{"ast":null,"code":"import AuthService from '@/services/AuthService.js';\nimport { Form, Field, ErrorMessage } from 'vee-validate';\nimport * as yup from 'yup';\nexport default {\n  name: 'RegisterView',\n  components: {\n    Form: Form,\n    Field: Field,\n    ErrorMessage: ErrorMessage\n  },\n  //eslint-disable-next-line\n  inject: ['GStore'],\n  data: function data() {\n    var schema = yup.object().shape({\n      username: yup.string().required('Username is required!').min(3, 'Must be at least 3 charaacter!').max(20, 'Must be maximum 20 characters!'),\n      email: yup.string().required('Email is required!').email('Email is invalid!').max(50, 'Must be maxi,u, 50 characters!'),\n      password: yup.string().required('Password is required!').min(6, 'Must be at least 6 characters!').max(40, 'Must be maximum 40 characters!')\n    });\n    return {\n      successful: false,\n      loading: false,\n      message: '',\n      schema: schema\n    };\n  },\n  mounted: function mounted() {\n    if (this.GStore.currentUser) {\n      this.$router.push('/event');\n    }\n  },\n  methods: {\n    // eslint-disable-next-line\n    handleRegiter: function handleRegiter(user) {\n      var _this = this;\n\n      AuthService.register(user).then(function () {\n        _this.$router.push({\n          path: '/'\n        });\n      })[\"catch\"](function () {\n        _this.message = 'could not register';\n      });\n      this.message = '';\n      this.successful = false;\n      this.loading = true;\n    }\n  }\n};","map":{"version":3,"mappings":"AA+CA,OAAOA,WAAP,MAAwB,2BAAxB;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,YAAtB,QAA0C,cAA1C;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,eAAe;EACbC,IAAI,EAAE,cADO;EAEbC,UAAU,EAAE;IACVL,IAAI,EAAJA,IADU;IAEVC,KAAK,EAALA,KAFU;IAGVC,YAAW,EAAXA;EAHU,CAFC;EAOb;EACEI,MAAM,EAAC,CAAC,QAAD,CARI;EASbC,IATa,kBASN;IACL,IAAMC,MAAK,GAAIL,GAAG,CAACM,MAAJ,GAAaC,KAAb,CAAmB;MAChCC,QAAQ,EAAER,GAAE,CACTS,MADO,GAEPC,QAFO,CAEE,uBAFF,EAGPC,GAHO,CAGH,CAHG,EAGA,gCAHA,EAIPC,GAJO,CAIH,EAJG,EAIC,gCAJD,CADsB;MAMhCC,KAAK,EAAEb,GAAE,CACNS,MADI,GAEJC,QAFI,CAEK,oBAFL,EAGJG,KAHI,CAGE,mBAHF,EAIJD,GAJI,CAIA,EAJA,EAII,gCAJJ,CANyB;MAWhCE,QAAQ,EAAEd,GAAE,CACTS,MADO,GAEPC,QAFO,CAEE,uBAFF,EAGPC,GAHO,CAGH,CAHG,EAGA,gCAHA,EAIPC,GAJO,CAIH,EAJG,EAIC,gCAJD;IAXsB,CAAnB,CAAf;IAiBA,OAAO;MACLG,UAAU,EAAE,KADP;MAELC,OAAO,EAAE,KAFJ;MAGLC,OAAO,EAAE,EAHJ;MAILZ,MAAK,EAALA;IAJK,CAAP;EAMD,CAjCY;EAkCba,OAlCa,qBAkCH;IACR,IAAI,KAAKC,MAAL,CAAYC,WAAhB,EAA6B;MAC3B,KAAKC,OAAL,CAAaC,IAAb,CAAkB,QAAlB;IACF;EACD,CAtCY;EAuCbC,OAAO,EAAE;IACP;IACAC,aAFO,yBAEOC,IAFP,EAEY;MAAA;;MACjB7B,WAAW,CAAC8B,QAAZ,CAAqBD,IAArB,EACGE,IADH,CACQ,YAAM;QACV,KAAI,CAACN,OAAL,CAAaC,IAAb,CAAkB;UAAEM,IAAI,EAAE;QAAR,CAAlB;MACD,CAHH,WAIS,YAAM;QACX,KAAI,CAACX,OAAL,GAAe,oBAAf;MACD,CANH;MAOA,KAAKA,OAAL,GAAe,EAAf;MACA,KAAKF,UAAL,GAAkB,KAAlB;MACA,KAAKC,OAAL,GAAe,IAAf;IACF;EAbO;AAvCI,CAAf","names":["AuthService","Form","Field","ErrorMessage","yup","name","components","inject","data","schema","object","shape","username","string","required","min","max","email","password","successful","loading","message","mounted","GStore","currentUser","$router","push","methods","handleRegiter","user","register","then","path"],"sourceRoot":"","sources":["/Users/tanachok/Desktop/conBo/Project2/SE331-2022-Project-front-end/src/views/RegisterFormView.vue"],"sourcesContent":["<template>\n  <div class=\"col-md-12\">\n    <div clas=\"card card-container\">\n      <img\n        id=\"profile-img\"\n        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n        class=\"profile-img-card\"\n      />\n      <Form @submit=\"handleRegiter\" :validation-schema=\"schema\">\n        <div v-if=\"!successful\">\n          <div class=\"form-group\">\n            <label for=\"username\">Username</label>\n            <Field name=\"username\" type=\"text\" class=\"form-control\" />\n            <ErrorMessage name=\"username\" class=\"error-feedback\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"email\">Email</label>\n            <Field name=\"email\" type=\"email\" class=\"form-control\" />\n            <ErrorMessage name=\"email\" class=\"error-feedback\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <Field name=\"password\" type=\"password\" class=\"form-control\" />\n            <ErrorMessage name=\"password\" class=\"error-feedback\" />\n          </div>\n          <div class=\"form-group\">\n            <button class=\"btn btn-primary btn-block\" :disabled=\"loading\">\n              <span\n                v-show=\"loading\"\n                class=\"spinner-border spinner-border-sm\"\n              ></span>\n              Sign Up\n            </button>\n          </div>\n        </div>\n      </Form>\n      <div\n        v-if=\"message\"\n        class=\"alert\"\n        :class=\"successful ? 'alert-success' : 'alert-danger'\"\n      >\n        {{ message }}\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport AuthService from '@/services/AuthService.js'\nimport { Form, Field, ErrorMessage } from 'vee-validate'\nimport * as yup from 'yup'\nexport default {\n  name: 'RegisterView',\n  components: {\n    Form,\n    Field,\n    ErrorMessage\n  },\n  //eslint-disable-next-line\n    inject:['GStore'],\n  data() {\n    const schema = yup.object().shape({\n      username: yup\n        .string()\n        .required('Username is required!')\n        .min(3, 'Must be at least 3 charaacter!')\n        .max(20, 'Must be maximum 20 characters!'),\n      email: yup\n        .string()\n        .required('Email is required!')\n        .email('Email is invalid!')\n        .max(50, 'Must be maxi,u, 50 characters!'),\n      password: yup\n        .string()\n        .required('Password is required!')\n        .min(6, 'Must be at least 6 characters!')\n        .max(40, 'Must be maximum 40 characters!')\n    })\n    return {\n      successful: false,\n      loading: false,\n      message: '',\n      schema\n    }\n  },\n  mounted() {\n    if (this.GStore.currentUser) {\n      this.$router.push('/event')\n    }\n  },\n  methods: {\n    // eslint-disable-next-line\n    handleRegiter(user){\n      AuthService.register(user)\n        .then(() => {\n          this.$router.push({ path: '/' })\n        })\n        .catch(() => {\n          this.message = 'could not register'\n        })\n      this.message = ''\n      this.successful = false\n      this.loading = true\n    }\n  }\n}\n</script>\n<style scoped>\nlabel {\n  display: block;\n  margin-top: 10px;\n}\n.card-container.card {\n  max-width: 350px !important;\n  padding: 40px 40px;\n}\n.card {\n  background-color: #f7f7f7;\n  padding: 20px 25px 30px;\n  margin: 0 auto 25px;\n  margin-top: 50px;\n  -moz-border-radius: 2px;\n  -webkit-border-radius: 2px;\n  border-radius: 2px;\n  -moz-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  -webkit-box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n  box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.3);\n}\n.profile-img-card {\n  width: 96px;\n  height: 96px;\n  margin: 0 auto 10px;\n  display: block;\n  -moz-border-radius: 50%;\n  -webkit-border-radius: 50%;\n  border-radius: 50%;\n}\n.error-feedback {\n  color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}